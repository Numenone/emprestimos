<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Sistema de Biblioteca</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="container">
    <h1>Biblioteca Digital</h1>

    <% if (typeof success !== 'undefined' && success) { %>
      <div class="alert alert-success"><%= success %></div>
    <% } %>

    <% if (typeof error !== 'undefined' && error) { %>
      <div class="alert alert-danger">
        <% if (typeof error === 'string') { %><%= error %><% } else { %>Erro ao processar requisição<% } %>
      </div>
    <% } %>

    <!-- Seção de Alunos -->
    <section>
      <h2>Cadastrar Aluno</h2>
      <form id="alunoForm" action="/alunos" method="POST">
        <input type="text" name="nome" placeholder="Nome" required>
        <input type="email" name="email" placeholder="E-mail" required>
        <input type="text" name="matricula" placeholder="Matrícula" required>
        <button type="submit">Cadastrar</button>
      </form>

      <h3>Alunos Cadastrados</h3>
      <% if (alunos && alunos.length > 0) { %>
        <table>
          <thead>
            <tr><th>Nome</th><th>E-mail</th><th>Matrícula</th><th>Ações</th></tr>
          </thead>
          <tbody>
            <% alunos.forEach(aluno => { %>
              <tr>
                <td><%= aluno.nome %></td>
                <td><%= aluno.email %></td>
                <td><%= aluno.matricula %></td>
                <td>
                  <button onclick="openEditAlunoModal('<%= aluno.id %>', '<%= aluno.nome %>', '<%= aluno.email %>', '<%= aluno.matricula %>')">Editar</button>
                  <button onclick="deleteAluno('<%= aluno.id %>')">Excluir</button>
                  <button onclick="enviarEmailAluno('<%= aluno.id %>', '<%= aluno.email %>')">Enviar E-mail</button>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      <% } else { %><p>Nenhum aluno cadastrado.</p><% } %>
    </section>

    <!-- Seção de Livros -->
    <section>
      <h2>Cadastrar Livro</h2>
      <form id="livroForm" action="/livros" method="POST">
        <input type="text" name="titulo" placeholder="Título" required>
        <input type="text" name="autor" placeholder="Autor" required>
        <input type="number" name="quantidade" placeholder="Quantidade" min="1" required>
        <button type="submit">Cadastrar</button>
      </form>

      <h3>Livros Cadastrados</h3>
      <% if (livros && livros.length > 0) { %>
        <table>
          <thead>
            <tr><th>Título</th><th>Autor</th><th>Quantidade</th><th>Ações</th></tr>
          </thead>
          <tbody>
            <% livros.forEach(livro => { %>
              <tr>
                <td><%= livro.titulo %></td>
                <td><%= livro.autor %></td>
                <td><%= livro.quantidade %></td>
                <td>
                  <button onclick="openEditLivroModal('<%= livro.id %>', '<%= livro.titulo %>', '<%= livro.autor %>', '<%= livro.quantidade %>')">Editar</button>
                  <button onclick="deleteLivro('<%= livro.id %>')">Excluir</button>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      <% } else { %><p>Nenhum livro cadastrado.</p><% } %>
    </section>

    <!-- Seção de Empréstimos -->
    <section>
      <h2>Registrar Empréstimo</h2>
      <form id="emprestimoForm" action="/emprestimos" method="POST">
        <select name="alunoId" required>
          <option value="">Selecione um aluno</option>
          <% alunos && alunos.forEach(aluno => { %>
            <option value="<%= aluno.id %>"><%= aluno.nome %></option>
          <% }); %>
        </select>
        <select name="livroId" required>
          <option value="">Selecione um livro</option>
          <% livros && livros.forEach(livro => { %>
            <option value="<%= livro.id %>"><%= livro.titulo %></option>
          <% }); %>
        </select>
        <input type="date" name="dataDevolucao" required>
        <button type="submit">Registrar</button>
      </form>

      <h3>Empréstimos Ativos</h3>
      <% if (emprestimos && emprestimos.length > 0) { %>
        <table>
          <thead>
            <tr><th>Aluno</th><th>Livro</th><th>Data Devolução</th><th>Ações</th></tr>
          </thead>
          <tbody>
            <% emprestimos.forEach(emp => { %>
              <tr>
                <td><%= emp.aluno?.nome %></td>
                <td><%= emp.livro?.titulo %></td>
                <td><%= new Date(emp.dataDevolucao).toLocaleDateString('pt-BR') %></td>
                <td>
                  <button onclick="devolverEmprestimo('<%= emp.id %>')">Devolver</button>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      <% } else { %><p>Nenhum empréstimo ativo no momento.</p><% } %>
    </section>

    <!-- Modal de Edição de Livro -->
    <div id="editLivroModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="hideModal('editLivroModal')">&times;</span>
        <h2>Editar Livro</h2>
        <form id="editLivroForm">
          <input type="hidden" id="editLivroId">
          <input type="text" id="editTitulo" placeholder="Título" required>
          <input type="text" id="editAutor" placeholder="Autor" required>
          <input type="number" id="editQuantidade" placeholder="Quantidade" min="1" required>
          <button type="submit">Salvar Alterações</button>
        </form>
      </div>
    </div>

    <!-- Modal de Edição de Aluno -->
    <div id="editAlunoModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="hideModal('editAlunoModal')">&times;</span>
        <h2>Editar Aluno</h2>
        <form id="editAlunoForm">
          <input type="hidden" id="editAlunoId">
          <input type="text" id="editNome" placeholder="Nome" required>
          <input type="email" id="editEmail" placeholder="E-mail" required>
          <input type="text" id="editMatricula" placeholder="Matrícula" required>
          <button type="submit">Salvar Alterações</button>
        </form>
      </div>
    </div>

    <script>
      // Controle de Modais
      function showModal(modalId) {
        document.getElementById(modalId).style.display = 'block';
      }

      function hideModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
      }

      // Fechar modais ao clicar fora
      window.onclick = function(event) {
        if (event.target.className === 'modal') {
          event.target.style.display = 'none';
        }
      }

      // Formulário de Aluno (AJAX)
      document.getElementById('alunoForm')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        const form = e.target;
        
        try {
          const response = await fetch('/alunos', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              nome: form.nome.value,
              email: form.email.value,
              matricula: form.matricula.value
            })
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao cadastrar aluno');
          }

          window.location.href = '/?success=Aluno cadastrado com sucesso';
        } catch (error) {
          window.location.href = `/?error=${encodeURIComponent(error.message)}`;
        }
      });

      // Formulário de Livro (AJAX)
      document.getElementById('livroForm')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        const form = e.target;
        
        try {
          const response = await fetch('/livros', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              titulo: form.titulo.value,
              autor: form.autor.value,
              quantidade: parseInt(form.quantidade.value)
            })
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao cadastrar livro');
          }

          window.location.href = '/?success=Livro cadastrado com sucesso';
        } catch (error) {
          window.location.href = `/?error=${encodeURIComponent(error.message)}`;
        }
      });

      // Formulário de Empréstimo (AJAX)
      document.getElementById('emprestimoForm')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        const form = e.target;
        
        try {
          const dataDevolucao = new Date(form.dataDevolucao.value);
          if (isNaN(dataDevolucao.getTime())) {
            throw new Error('Data de devolução inválida');
          }

          const response = await fetch('/emprestimos', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              alunoId: parseInt(form.alunoId.value),
              livroId: parseInt(form.livroId.value),
              dataDevolucao: dataDevolucao.toISOString()
            })
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao registrar empréstimo');
          }

          window.location.href = '/?success=Empréstimo registrado com sucesso';
        } catch (error) {
          window.location.href = `/?error=${encodeURIComponent(error.message)}`;
        }
      });

      // Edição de Livro
      function openEditLivroModal(id, titulo, autor, quantidade) {
        document.getElementById('editLivroId').value = id;
        document.getElementById('editTitulo').value = titulo;
        document.getElementById('editAutor').value = autor;
        document.getElementById('editQuantidade').value = quantidade;
        showModal('editLivroModal');
      }

      document.getElementById('editLivroForm')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
          const response = await fetch(`/livros/${document.getElementById('editLivroId').value}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              titulo: document.getElementById('editTitulo').value,
              autor: document.getElementById('editAutor').value,
              quantidade: parseInt(document.getElementById('editQuantidade').value)
            })
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao atualizar livro');
          }

          window.location.href = '/?success=Livro atualizado com sucesso';
        } catch (error) {
          window.location.href = `/?error=${encodeURIComponent(error.message)}`;
        }
      });

      // Edição de Aluno
      function openEditAlunoModal(id, nome, email, matricula) {
        document.getElementById('editAlunoId').value = id;
        document.getElementById('editNome').value = nome;
        document.getElementById('editEmail').value = email;
        document.getElementById('editMatricula').value = matricula;
        showModal('editAlunoModal');
      }

      document.getElementById('editAlunoForm')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
          const response = await fetch(`/alunos/${document.getElementById('editAlunoId').value}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              nome: document.getElementById('editNome').value,
              email: document.getElementById('editEmail').value,
              matricula: document.getElementById('editMatricula').value
            })
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao atualizar aluno');
          }

          window.location.href = '/?success=Aluno atualizado com sucesso';
        } catch (error) {
          window.location.href = `/?error=${encodeURIComponent(error.message)}`;
        }
      });

      // Funções para deletar
      async function deleteLivro(id) {
        if (confirm('Tem certeza que deseja excluir este livro?')) {
          try {
            const response = await fetch(`/livros/${id}`, {
              method: 'DELETE'
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.error || 'Erro ao excluir livro');
            }

            window.location.href = '/?success=Livro excluído com sucesso';
          } catch (error) {
            window.location.href = `/?error=${encodeURIComponent(error.message)}`;
          }
        }
      }

      async function deleteAluno(id) {
        if (confirm('Tem certeza que deseja excluir este aluno?')) {
          try {
            const response = await fetch(`/alunos/${id}`, {
              method: 'DELETE'
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.error || 'Erro ao excluir aluno');
            }

            window.location.href = '/?success=Aluno excluído com sucesso';
          } catch (error) {
            window.location.href = `/?error=${encodeURIComponent(error.message)}`;
          }
        }
      }

      async function enviarEmailAluno(id, email) {
       if (confirm(`Deseja enviar um e-mail para ${email}?`)) {
           try {
              const response = await fetch(`/alunos/${id}/enviar-email`, {
                 method: 'POST'
              });

           if (!response.ok) {
             const errorData = await response.json();
             throw new Error(errorData.error || 'Erro ao enviar e-mail');
            }

           window.location.href = '/?success=E-mail enviado com sucesso';
          } catch (error) {
           window.location.href = `/?error=${encodeURIComponent(error.message)}`;
          }
        }
      }

      // Devolução de empréstimo
      async function devolverEmprestimo(id) {
        if (confirm('Confirmar devolução deste livro?')) {
          try {
            const response = await fetch(`/emprestimos/${id}/devolver`, {
              method: 'POST'
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.error || 'Erro ao registrar devolução');
            }

            window.location.href = '/?success=Devolução registrada com sucesso';
          } catch (error) {
            window.location.href = `/?error=${encodeURIComponent(error.message)}`;
          }
        }
      }
    </script>
  </div>
</body>
</html>