// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id               Int       @id @default(autoincrement())
  nome             String
  email            String    @unique
  senha            String
  codigoAtivacao   String?
  status           String    @default("INATIVO") // ATIVO, INATIVO
  perguntaSeguranca String?
  respostaSeguranca String?
  nivelAcesso      Int       @default(1) // 1=usu√°rio, 2=moderador, 3=admin
  bloqueado        Boolean   @default(false)
  tentativasLogin  Int       @default(0)
  ultimoLogin      DateTime?
  deleted          Boolean   @default(false)
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  logs             Log[]
  emprestimos      Emprestimo[]
}

model Aluno {
  id               Int       @id @default(autoincrement())
  nome             String
  email            String    @unique
  matricula        String    @unique
  senha            String
  codigoAtivacao   String?
  status           String    @default("INATIVO") // ATIVO, INATIVO
  perguntaSeguranca String?
  respostaSeguranca String?
  nivelAcesso      Int       @default(1)
  bloqueado        Boolean   @default(false)
  tentativasLogin  Int       @default(0)
  ultimoLogin      DateTime?
  deleted          Boolean   @default(false)
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  emprestimos      Emprestimo[]
  logs             Log[]
}

model Livro {
  id         Int         @id @default(autoincrement())
  titulo     String
  autor      String
  quantidade Int         @default(1)
  deleted    Boolean     @default(false)
  deletedAt  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  emprestimos Emprestimo[]
}

model Emprestimo {
  id             Int      @id @default(autoincrement())
  aluno          Aluno?   @relation(fields: [alunoId], references: [id])
  alunoId        Int?
  usuario        Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId      Int?
  livro          Livro    @relation(fields: [livroId], references: [id])
  livroId        Int
  dataEmprestimo DateTime @default(now())
  dataDevolucao  DateTime
  devolvido      Boolean  @default(false)
  deleted        Boolean  @default(false)
  deletedAt      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  acao      String
  detalhes  String
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?
  aluno     Aluno?   @relation(fields: [alunoId], references: [id])
  alunoId   Int?
  createdAt DateTime @default(now())
  ip        String? 
}